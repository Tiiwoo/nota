@top Document { TextBody }

TextBody { TextToken* }

TextToken { Text | Newline | Multinewline | Command }

Command { PctCommand | HashCommand | AtCommand }

PctCommand { pct Ident (ArgCodeAnon | ArgText)* }
HashCommand { hash CommandName (ArgCodeAnon | ArgText)* }
AtCommand { at CommandName ArgCodeNamed* ArgText* }

CommandName { Ident | Number | lparen Js rparen }

ArgCodeNamed { lbrkt Ident (eq Js)? rbrkt }

ArgCodeAnon { lbrkt Js rbrkt }

ArgText {  
  lbrc TextBody rbrc
| lverb VerbatimText rverb
}

// @skip { Comment }

@context dialectContext from "./tokens.ts"
@external tokens text from "./tokens.ts" { Text }
@external tokens verbatim from "./tokens.ts" { VerbatimText }
@external tokens js from "./tokens.ts" { Js }

@tokens {    
  pct[@export] { "%" }
  at[@export] { "@" }
  hash[@export] { "#" }
  lverb { "|{ "}
  rverb { "}| "}
  lparen[@export] { "(" }
  rparen[@export] { ")" }
  lbrc[@export] { "{" }
  rbrc[@export] { "}" }
  lbrkt[@export] { "[" }
  rbrkt[@export] { "]" }
  eq[@export] { "=" }
  
  Multinewline { "\n" "\n"+ }
  Newline { "\n" }
  Ident { $[a-zA-Z_$]$[a-zA-Z0-9_$]* }
  Number { $[0-9]+ }

  // Comment { "//" ![\n]* }

  @precedence { Multinewline, Newline }
}

