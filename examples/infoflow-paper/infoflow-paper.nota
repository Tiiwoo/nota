%%%
import "@nota-lang/nota-theme-acm/dist/index.css"
import "@nota-lang/nota-theme-standalone/dist/index.css"
import bibtex from "./bibliography.bib"
import {rust} from "@codemirror/lang-rust"
import {cpp} from "@codemirror/lang-cpp"

let sysname = @Smallcaps{Flowistry};
%%%

@Title: Modular Information Flow through Ownership

%let stanford = @Affiliation{@Institution{Stanford University}}
@Authors:
  @Author: @Name{Will Crichton} #stanford
  @Author:
    @Name: Marco Patrignani
    @Affiliation:
      @Institution: University of Trento
  @Author: @Name{Maneesh Agrawala} #stanford
  @Author: @Name{Pat Hanrahan} #stanford

@Abstract:
  Statically analyzing information flow, or how data influences other data within a program, is a challenging task in imperative languages. Analyzing pointers and mutations requires access to a program's complete source. However, programs often use pre-compiled dependencies where only type signatures are available. We demonstrate that ownership types can be used to soundly and precisely analyze information flow through function calls given only their type signature. From this insight, we built Flowistry, a system for analyzing information flow in Rust, an ownership-based language. We prove the system's soundness as a form of noninterference using the Oxide formal model of Rust. Then we empirically evaluate the precision of Flowistry, showing that modular flows are identical to whole-program flows in 94% of cases drawn from large Rust codebases. We illustrate the applicability of Flowistry by using it to implement prototypes of a program slicer and an information flow control system.

@Section[label: "sec_intro"]: Introduction

Information flow describes how data influences other data within a program. Information flow has applications to security, such as information flow control &sabelfeld2003language, and to developer tools, such as program slicing &weiser1984program. Our goal is to build a practical system for analyzing information flow, meaning:

* **Applicable to common language features:** the language being analyzed  should support widely used features like pointers and in-place mutation.
* **Zero configuration to run on existing code:** the analyzer must integrate with an existing language and existing unannotated programs. It must not require users to adopt a new language designed for information flow.
* **No dynamic analysis:** to reduce integration challenges and costs, the analyzer must be purely static --- no modifications to runtimes or binaries are needed.
* **Modular over dependencies:** programs may not have source available for dependencies. The analyzer must have reasonable precision without whole-program analysis.


As a case study on the challenges imposed by these requirements, consider analyzing the information that flows to the return value in this C++ function:

```cpp
// Copy elements 0 to max into a new vector
vector<int> copy_to(vector<int>& v, size_t max) {
  vector<int> v2; size_t i = 0;
  for (auto x(v.begin()); x != v.end(); ++x) {
    if (i == max) { break; }
    v2.push_back(*x); ++i;
  }
  return v2;
}
```

Here, a key flow is that `v2` is influenced by `v`: (1) `push_back` mutates `v2` with `*x` as input, and (2) `x` points to data within `v`. But how could an analyzer statically deduce these facts? For C++, the answer is *by looking at function implementations*. The implementation of `push_back` mutates `v2`, and the implementation of `begin` returns a pointer to data in `v`.

However, analyzing such implementations violates our fourth requirement, since these functions may only have their type signature available. In C++, given only a function's type signature, not much can be inferred about its behavior, since the type system does not contain information relevant to pointer analysis.

Our key insight is that *ownership types* can be leveraged to modularly analyze pointers and mutation using only a function's type signature. Ownership has emerged from several intersecting lines of research on linear logic &girard1987linear, class-based alias management &clarke1998ownership, and region-based memory management &grossman2002region. The fundamental law of ownership is that data cannot be simultaneously aliased and mutated. Ownership-based type systems enforce this law by tracking which entities own which data, allowing ownership to be transferred between entities, and flagging ownership violations like mutating immutably-borrowed data.

Today, the most popular ownership-based language is Rust. Consider the information flows in this Rust implementation of `copy_to`:

```rust
fn copy_to(v: &Vec<i32>, max: usize) -> Vec<i32> {
  let mut v2 = Vec::new();
  for (i, x) in v.iter().enumerate() {
    if i == max { break; }
    v2.push(*x);
  }
  return v2;
}
```

Focus on the two methods `push` and `iter`. For a `Vec<i32>`, these methods have the following type signatures:

```rust
fn push(&mut self, value: i32);
fn iter<'a>(&'a self) -> Iter<'a, i32>;
```

To determine that `push` mutates `v2`, we leverage *mutability modifiers*. All references in Rust are either immutable (i.e. the type is `&T`) or mutable (the type is `&mut T`). Therefore `iter` does not mutate `v` because it takes `&self` as input (excepting interior mutability, discussed in @Ref{sec:limitations}), while `push` may mutate `v2` because it takes `&mut self` as input.

To determine that `x` points to `v`, we leverage *lifetimes*. All references in Rust are annotated with a lifetime, either explicitly (such as `'a`) or implicitly. Shared lifetimes indicate aliasing: because `&self` in `iter` has lifetime `'a`, and because the returned `Iter` structure shares that lifetime, then we can determine that `Iter` may contain pointers to `self`.


Inspired by this insight, we built #sysname, a system for analyzing information flow in the safe subset of Rust programs. #sysname satisfies our four design criteria: (1) Rust supports pointers and mutation, (2) #sysname does not require any change to the Rust language or to Rust programs, (3) #sysname is a purely static analysis, and (4) Flowistry uses ownership types to analyze function calls without needing their definition. This paper presents a theoretical and empirical investigation into #sysname in five parts:

1. We provide a precise description of how #sysname computes information flow by embedding its definition within Oxide @Ref{weiss2019oxide}, a formal model of Rust (&sec_analysis).
2. We prove the soundness of our information flow analysis as a form of noninterference (&sec_soundness).
3. We describe the implementation of #sysname that bridges the theory of Oxide to the practicalities of Rust (&sec_implementation).
4. We evaluate the precision of the modular analysis on a dataset of large Rust codebases, finding that modular flows are identical to whole-program flows in 94% of cases, and are on average 7% larger in the remaining cases (&sec_evaluation).
5. We demonstrate the utility of #sysname by using it to prototype a program slicer and an IFC checker (&sec_applications).

We conclude by presenting related work (&sec_rw) and discussing future directions for #sysname (&sec_discussion).
Due to space constraints, we omit many formal details, all auxiliary lemmas, and all proofs.
The interested reader can find them in the appendix.
#sysname and our applications of it are publicly available, open-source, MIT-licensed projects at <https://github.com/willcrichton/flowistry>.


@Section[label: "sec_analysis"]: Analysis

Inspired by the dependency calculus of Abadi et al. &abadi1999core, our analysis represents information flow as a set of dependencies for each variable in a given function. The analysis is flow-sensitive, computing a different dependency set at each program location, and field-sensitive, distinguishing between dependencies for fields of a data structure.

While the analysis is implemented in and for Rust, our goal here is to provide a description of it that is both concise (for clarity of communication) and precise (for amenability to proof). We therefore base our description on Oxide &weiss2019oxide, a formal model of Rust. At a high level, Oxide provides three ingredients:

%%%
let tc = macro{#1; #2; #3 \vdash #4 : #5 \Rightarrow #6};
let stepsto = macro{\Sigma \vdash (#1; #2) \rightarrow (#3; #4)};
let stepped = macro{#1'};
let loc = @{#texRef{tex_loc}{\ell}};
let deps = @{#texRef{tex_deps}{\kappa}};
let depctx = @{#texRef{tex_depctx}{\Theta}}
%%%

1. A syntax of Rust-like programs with expressions $e$ and types $\tau$.
2. A type-checker, expressed with the judgment $#tc{\Sigma}{\Delta}{\Gamma}{e}{\tau}{\Gamma'}$ using the contexts $\Gamma$ for types and lifetimes, $\Delta$ for type variables, and $\Sigma$ for global functions.
3. An interpreter, expressed by a small-step operational semantics with the judgment $#stepsto{\sigma}{e}{#stepped{\sigma}}{e'}$ using $\sigma$ for a runtime stack.

@Definition[name: "tex_loc"]{We extend this model by assuming that each expression in a program is automatically labeled with a unique location $#loc$.}
Then for a given expression $e$, our analysis computes the set of dependencies
@Definition[name: "tex_deps"]{$#deps ::= \\{\overline{#loc}\\}$}.
Because expressions have effects on persistent memory, we further compute a *dependency context*
@Definition[name: "tex_depctx"]{$#depctx ::= \\{\overline{p \mapsto #deps}\\}$}
from memory locations $p$ to dependencies $#deps$. The computation of information flow is intertwined with type-checking, represented as a modified type-checking judgment (additions highlighted in red):

%%%
let tcnew = macro{#1; #2; #3; #4; \vdash #5 : #6 \Rightarrow #7; #8}
let hlt = macro{\htmlStyle{color: red}{#1}}
let withslice = macro{\bullet #1}
%%%

$$
#tcnew{\Sigma}{\Delta}{\Gamma}{#hlt{#depctx}}{e_{#hlt{#loc}}}{\tau#hlt{#withslice{#deps}}}{\Gamma'}{#hlt{#depctx'}}
$$

This judgment is read as, "with type contexts $\Sigma, \Delta, \Gamma$ and dependency context $#hlt{#depctx}$, $e$ at location $#hlt{#loc}$ has type $\tau$ and dependencies $#hlt{#deps}$, producing a new dependency context $#hlt{#depctx'}$."

Oxide is a large language &mdash; describing every feature, judgment, and inference rule would exceed our space constraints. Instead, in this section we focus on a few key rules that demonstrate the novel aspects of our system. We first lay the foundations for dealing with variables and mutation (&sec_places), and then describe how we modularly analyze references (&sec_references) and function calls (&sec_funcalls). 
The remaining rules can be found in the appendix.

@Subsection[label: "sec_places"]: Variables and Mutation

The core of Oxide is an imperative calculus with constants and variables. The abstract syntax for these features is below:

%%%
let msf = macro{\mathsf{#1}}
let textsc = macro{\text{\tiny #1}}
let L = new Language(function(){ return [
  ["Variable", "vr", "x"],
  ["Number", "num", "n"],
  ["Function", "fname", "f"],
  ["Path", "path", "q", [
    ["empty", macro{\varepsilon}],
    ["with", macro{#1.#2}, () => [this.vr, this.path]]    
  ]],
  ["Place", "plc", @{\pi}, [
    ["form", macro{#1.#2}, () => [this.vr, this.path]]
  ]],
  ["Constant", "const", "c", [
    ["unit", macro{()}],
    ["num", macro{#1}, () => [this.num]],
    ["true", macro{#msf{true}}],
    ["false", macro{#msf{false}}]
  ]],
  ["Base Type", "tyb", @{\tau^{#textsc{B}}}, [
    ["unit", macro{#msf{unit}}],
  ]],
  ["Sized Type", "tys", @{\tau^{#textsc{SI}}}, [
    ["base", macro{#1}, () => [this.tyb]],
    ["tup", macro{(#1)}, () => [@{#(this.tys)_1, \ldots, #(this.tys)_n}]]    
  ]],
  ["Expression", "expr", "e", [
    ["const", macro{#1}, () => [this.const]],
    ["plc", macro{#1}, () => [this.plc]],
    ["let", macro{#msf{let}~#1 : #2~=~#3;~#4},
      () => [this.vr, this.tys, @{#(this.expr)_1}, @{#(this.expr)_2}]],
    ["asgn", macro{#1 := #2}, () => [this.plc, this.expr]],
    ["seq", macro{#1;~#2}, () => [@{#(this.expr)_1}, @{#(this.expr)_2}]],
  ]],
  ["Ownership Qualifier", "ownq", @{\omega}, [
    ["shrd", macro{#msf{shrd}}],
    ["uniq", macro{#msf{uniq}}]
  ]],
  ["Place Expression", "pexp", "p", [
    ["var", macro{#1}, () => [this.vr]],
    ["elem", macro{#1.#2}, () => [this.pexp, this.num]],
    ["deref", macro{\ast #1}, () => [this.pexp]]
  ]],
  ["Dead Type", "tyd", @{\tau^{#textsc{SD}}}, [
    ["s", macro{#1^\dagger}, () => [this.tys]],
    ["tup", macro{(#1)}, () => [@{#(this.tyd)_1, \ldots, #(this.tyd)_n}]]
  ]],
  /*["Maybe Unsized Type", "tyx", @{\tau^{#textsc{XI}}}, [
    ["s", macro{#1}, () => [this.tys]],
    ["d", macro{[#1]}, () => [this.tys]]
  ]],
  ["Maybe Dead Type", "tysx", @{\tau^{#textsc{SX}}}, [
    ["s", macro{#1}, () => [this.tys]],
    ["d", macro{#1}, () => [this.tyd]],
    ["tup", macro{(#1)}, () => [@{#(this.tysx)_1, \ldots, #(this.tysx)_n}]]
  ]],
  ["Type", "ty", @{\tau}, [
    ["tyx", macro{#1}, () => [this.tyx]],
    ["tysx", macro{#1}, () => [this.tysx]]
  ]],
  ["Loan", "loan", @{\ell}, [
    ["form", macro{^{#1}#2}, () => [this.ownq, this.pexp]],    
  ]],
  ["Frame Typing", "ft", @{\mathcal{F}}, [
    ["empty", macro{\bullet}],
    ["wty", macro{#1, #2 : #3}, () => [this.ft, this.vr, this.tyx]],
    ["wlf", macro{#1, #2 \mapsto #3}, () => [this.ft, this.concrprov, @{\{#repeat{#(this.loan)}\}}]]
  ]],
  ["Stack Typing", "stackenv", @{\Gamma}, [
    ["empty", macro{\bullet}],
    ["wfr", macro{#1 \mathrel{\natural} #2}, () => [this.stackenv, this.ft]]
  ]],
  ["Kind", "kind", @{\kappa}, [
    ["base", macro{\bigstar}],
    ["prov", macro{#msf{PRV}}],
    ["frm", macro{#msf{FRM}}],
  ]],
  ["Type Var", "tyvar", @{\alpha}],
  ["Type Environment", "tyenv", @{\Delta}, [
    ["empty", macro{\bullet}],
    ["wtfvar", macro{#1, #2 : #3}, () => [this.tyenv, this.tyvar, this.kindbase()]],
    ["wprov", macro{#1, #2 : #3}, () => [this.tyenv, this.abstrprov, this.kindprov()]],
    ["wfrm", macro{#1, #2 : #3}, () => [this.tyenv, this.frmvar, this.kindfrm()]],
    ["wconstr", macro{#1, #2 \mathrel{:>} #3}, () => [this.tyenv, @{#(this.abstrprov)_1}, @{#(this.abstrprov)_2}]]
  ]],
  
  ["Global Entries", "fdef", @{\varepsilon}, [
    ["form", 
     macro{#msf{fn} ~ #1 \left\langle #2, #3, #4 \right\rangle\left(#5 : #6\right) \rightarrow #7 ~ #msf{where} #8 ~ \{ #9 \}},
     () => [
       this.fname, @{#repeat{\psi}}, repeat(this.abstrprov),
       repeat(this.tyvar), this.vr, this.tys, this.tys, 
       @{#repeat{#(this.abstrprov)_1 : #(this.abstrprov)_2}}, 
       this.expr]
    ]
  ]],
  ["Global Environment", "fenv", @{\Sigma}, [
    ["empty", macro{\bullet}],
    ["with", macro{#1, #2}, () => [this.fenv, this.fdef]]
  ]]*/
]})
%%%

@(L.Bnf)

TODOS for WILL:
* in-markdown comment syntax
* labels on #-headers / all md-specific elements
* newline at end of block should indent to current block
* fix position of error box. show compiler errors inline
* js commands (e.g. block comment) aren't working in script blocks


@References[bibtex]