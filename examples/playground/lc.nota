%let[L][new Language(function() { return [
  ["Variable", "vr", "x", []],
  ["Expression", "expr", "e", [
    ["lam", 2, (...args) => @{\lambda #0 . #1},
      () => [this.vr(), this.expr()]],
    ["app", 2, (...args) => @{#0~#1},
       () => [@{#(this.expr){}_1}, @{#(this.expr){}_2}]]
  ]]]})]
%let[e][L.expr()]
%let[x][L.vr()]

@Section{Syntax}

The language's grammar is: @(L.Bnf)

@Section{Semantics}

%letfn[step]{#tex_ref{step}{#0 \mapsto #1}}
@Definition[name="tex:step"]{
  The language has a small step operational semantics defined by the
  judgment @${#step{#e}{#e'}}.
}
Its operational semantics are in @Ref{fig:sem}.

%letfn[prem][() => @{@${#0}}]
@Figure[label="fig:sem"]{
  @IR[Top=prem(@{
    #step{#e _1}{#e _1'}
  })][Bot=prem(@{
    #step{#(L.exprapp){#e _1}{#e _2}}{#(L.exprapp){#e _1'}{#e _2}}
  })]
  @IR[Top=()=>null][Bot=prem(@{
    #step{#(L.exprapp){(#(L.exprlam){#x}{#e _1})}{#e _2}}{
      [#x \rightarrow #e _2] #e _1}
  })]

  @Caption{The operational semantics.}
}